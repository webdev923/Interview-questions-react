{"id":"que-java-script-necesito-para-aprender-react","level":1,"title":"¿Qué JavaScript necesito para aprender React?","content":"<h5 id=\"javascript-que-necesitas-para-aprender-react\">JavaScript que necesitas para aprender React</h5>\n<p><strong>Para aprender y dominar React necesitas saber JavaScript.</strong> A diferencia de otros frameworks y bibliotecas, como <em>Angular</em> y <em>Vue</em>, que se basan en su propio <em>DSL</em> (Domain-Specific Language), React usa una extensión de la sintaxis de JavaScript llamada <em>JSX</em>. Más adelante lo veremos en detalle pero, al final, no deja de ser azúcar sintáctico para escribir menos JavaScript.</p>\n<p><strong>En React todo es JavaScript.</strong> Para bien y para mal. Este libro da por sentados unos conocimientos previos del lenguaje de programación pero antes de empezar vamos a hacer un pequeño repaso por algunas de las características más importantes que necesitarás conocer.</p>\n<p><strong>Si ya dominas JavaScript puedes saltarte este capítulo</strong> y continuar con el libro, pero recuerda que siempre podrás revisar este capítulo como referencia.</p>\n<h5 id=\"ecmascript-modules-o-esmodules\">EcmaScript Modules o ESModules</h5>\n<p>Los <strong>EcmaScript Modules</strong> es la forma nativa que tiene JavaScript para importar y exportar variables, funciones y clases entre diferentes ficheros. Hoy en día, especialmente si trabajamos con un empaquetador de aplicaciones como Webpack, vamos a estar trabajando constantemente con esta sintaxis.</p>\n<p>Por un lado podemos crear módulos exportándolos por defecto:</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// sayHi.js</span>\n<span class=\"token comment\">// exportamos por defecto el módulo sayHi</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">sayHi</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// index.js</span>\n<span class=\"token comment\">// este módulo lo podremos importar con el nombre que queramos</span>\n<span class=\"token keyword\">import</span> sayHi <span class=\"token keyword\">from</span> <span class=\"token string\">'./sayHi.js'</span>\n\n<span class=\"token comment\">// al ser el módulo exportado por defecto podríamos usar otro nombre</span>\n<span class=\"token keyword\">import</span> miduHi <span class=\"token keyword\">from</span> <span class=\"token string\">'./sayHi.js'</span></code></pre>\n\n<p>También podemos hacer exportaciones nombradas de módulos, de forma que un módulo tiene un nombre asignado y para importarlo necesitamos usar exactamente el nombre usado al exportarlo:</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// sayHi.js</span>\n<span class=\"token comment\">// podemos usar exportaciones nombradas para mejorar esto</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// y se pueden hacer tantas exportaciones de módulos nombrados como queramos</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">anotherHi</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// index.js</span>\n<span class=\"token comment\">// ahora para importar estos módulos en otro archivo podríamos hacerlo así</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>sayHi<span class=\"token punctuation\">,</span> anotherHi<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./sayHi.js'</span></code></pre>\n\n<p>Los <em>imports</em> que hemos visto hasta aquí se conocen como <em>imports estáticos</em>. Esto significa que ese módulo será cargado en el momento de la carga del archivo que lo importa.</p>\n<p>También existen los <em>imports dinámicos</em>, de forma que podamos importar módulos que se carguen en el momento de la ejecución del programa o cuando nosotros decidamos (por ejemplo, como respuesta a un click).</p>\n<pre><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// los imports dinámicos devuelven una Promesa</span>\n  <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./sayHi.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ahora podemos ejecutar el módulo que hemos cargado</span>\n    module<span class=\"token punctuation\">.</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hola'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>Los imports dinámicos son útiles también cuando trabajamos con empaquetadores como Webpack o Vite, ya que esto creará unos <em>chunks</em> (fragmentos) que se cargarán fuera del bundle general. ¿El objetivo? Mejorar el rendimiento de la aplicación.</p>\n<p>Existen más sintaxis para trabajar con módulos, pero con saber las que hemos visto ya sería suficiente para seguir el libro.</p>\n<p><strong>¿Por qué es importante?</strong></p>\n<p>Para empezar React te ofrece diferentes partes de su biblioteca a través de módulos que podrás importar. Además nuestros componentes los tendremos separados en ficheros y, cada uno de ellos, se podrá importar utilizando <em>ESModules</em>.</p>\n<p>Además, por temas de optimización de rendimiento, podremos importar de forma dinámica componentes y así mejorar la experiencia de nuestros usuarios al necesitar cargar menos información para poder utilizar la página.</p>\n<h5 id=\"operador-condicional-ternario\">Operador condicional (ternario)</h5>\n<p>Las ternarias son una forma de realizar condiciones sin la necesidad de usar la sintaxis con <code>if</code>. Se podría decir que es una forma de atajo para evitar escribir tanto código.</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Es par'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Es impar'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// usando ternaria</span>\nnumber <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Es par'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Es impar'</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p><strong>¿Por qué es importante?</strong></p>\n<p>En las interfaces gráficas es muy normal que, dependiendo del estado de la aplicación o los datos que nos lleguen, vamos a querer renderizar una cosa u otra en pantalla. Para realizar esto, en lugar de utilizar <code>if</code> se usan las ternarias ya que queda mucho más legible dentro del <em>JSX</em>.</p>\n<h5 id=\"funciones-flecha-o-arrow-functions\">Funciones flecha o Arrow Functions</h5>\n<p>Las <em>funciones flecha</em> o <em>arrow function</em> fueron añadidas a JavaScript en el estándar ECMAScript 6 (o ES2015). En principio parece que simplemente se trata de una sintaxis alternativa más simple a la hora de crear expresiones de funciones:</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">nombreDeLaFuncion</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">param1<span class=\"token punctuation\">,</span> param2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// instrucciones de la función</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">nombreDeLaFuncion</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">param1<span class=\"token punctuation\">,</span> param2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// con arrow function</span>\n  <span class=\"token comment\">// instrucciones de la función</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>Pero además del cambio de sintaxis existen otras características de las funciones flechas que se usan constantemente en React.</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// return implícito al escribir una sola línea</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'midudev'</span>\n\n<span class=\"token comment\">// ahorro de parentésis para función de un parámetro</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">duplicateNumber</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n\n<span class=\"token comment\">// se usan mucho como callback en funciones de arrays</span>\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> newNumbers <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newNumbers<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3]</span></code></pre>\n\n<p>También tiene algunos cambios respecto al valor de <code>this</code> pero, aunque es aconsejable dominarlo, no es realmente necesario para poder seguir con garantías el libro.</p>\n<p><strong>¿Por qué es importante?</strong></p>\n<p>Aunque hace unos años con React se trabajaba principalmente con clases, desde la irrupción de los hooks en la versión 16.8 ya no se usan mucho. Esto hace que se usen mucho más funciones.</p>\n<p>Las funciones flecha, además, puedes verlas fácilmente conviviendo dentro de tus componentes. Por ejemplo, a la hora de renderizar una lista de elementos ejecutarás el método <code>.map</code> del array y, como callback, seguramente usarás una función flecha anónima.</p>\n<h5 id=\"parámetros-predeterminados-default-values\">Parámetros predeterminados (default values)</h5>\n<p>En JavaScript puedes proporcionar valores por defecto a los parámetros de una función en caso que no se le pase ningún argumento.</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// al parámetro b le damos un valor por defecto de 1</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// si le pasamos un argumento con valor, se ignora el valor por defecto</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n\n<span class=\"token comment\">// si no le pasamos un argumento, se usa el valor por defecto</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span>\n\n<span class=\"token comment\">// las funciones flecha también pueden usarlos</span>\n<span class=\"token keyword\">const</span> sayHi <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>msg <span class=\"token operator\">=</span> <span class=\"token string\">'Hola React!'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Hola React!'</span></code></pre>\n\n<p><strong>¿Por qué es importante?</strong></p>\n<p>En React existen dos conceptos muy importantes: <strong>componentes y hooks</strong>. No vamos a entrar en detalle ahora en ellos pero lo importante es que ambos son construidos con funciones.</p>\n<p>Poder añadir valores por defecto a los parámetros de esas funciones en el caso que no venga ningún argumento <strong>es clave</strong> para poder controlar React con éxito.</p>\n<p>Los componentes, por ejemplo, pueden no recibir parámetros y, pese a ello, seguramente vas a querer que tengan algún comportamiento por defecto. Lo podrás conseguir de esta forma.</p>\n<h5 id=\"template-literals\">Template Literals</h5>\n<p>Los template literals o plantillas de cadenas llevan las cadenas de texto al siguiente nivel permitiendo expresiones incrustadas en ellas.</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> inicio <span class=\"token operator\">=</span> <span class=\"token string\">'Hola'</span>\n<span class=\"token keyword\">const</span> final <span class=\"token operator\">=</span> <span class=\"token string\">'React'</span>\n\n<span class=\"token comment\">// usando una concatenación normal sería</span>\n<span class=\"token keyword\">const</span> mensaje <span class=\"token operator\">=</span> inicio <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> final\n\n<span class=\"token comment\">// con los template literals podemos evaluar expresiones</span>\n<span class=\"token keyword\">const</span> mensaje <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>inicio<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>final<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></code></pre>\n\n<p>Como ves, para poder usar los template literals, necesitas usar el símbolo ```</p>\n<p>Además, nos permiten utilizar cadenas de texto de más de una línea.</p>\n<p><strong>¿Por qué es importante?</strong></p>\n<p>En React esto se puede utilizar para diferentes cosas. No sólo es normal crear cadenas de texto para mostrar en la interfaz... también puede ser útil para crear clases para tus elementos HTML de forma dinámica. Verás que los template literales están en todas partes.</p>\n<h5 id=\"propiedades-abreviadas\">Propiedades abreviadas</h5>\n<p>Desde <em>ECMAScript 2015</em> se puede iniciar un objeto utilizado nombre de propiedades abreviadas. Esto es que si quieres utilizar como valor una variable que tiene el mismo nombre que la key, entonces puedes indicar la inicialización una vez:</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Miguel'</span>\n<span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">36</span>\n<span class=\"token keyword\">const</span> book <span class=\"token operator\">=</span> <span class=\"token string\">'React'</span>\n\n<span class=\"token comment\">// antes haríamos esto</span>\n<span class=\"token keyword\">const</span> persona <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> age<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">book</span><span class=\"token operator\">:</span> book <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ahora podemos hacer esto, sin repetir</span>\n<span class=\"token keyword\">const</span> persona <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> book <span class=\"token punctuation\">}</span></code></pre>\n\n<p><strong>¿Por qué es importante?</strong></p>\n<p>En React se trata muchas veces con objetos y siempre vamos a querer escribir el menor número de líneas posible para mantener nuestro código fácil de mantener y entender.</p>\n<h5 id=\"la-desestructuración\">La desestructuración</h5>\n<p>La sintaxis de <em>desestructuración</em> es una expresión de JavaScript que permite extraer valores de Arrays o propiedades de objetos en distintas variables.</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// antes</span>\n<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> primerNumero <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> segundoNumero <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// ahora</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>primerNumero<span class=\"token punctuation\">,</span> segundoNumero<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array\n\n<span class=\"token comment\">// antes con objetos</span>\n<span class=\"token keyword\">const</span> persona <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Miguel'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">book</span><span class=\"token operator\">:</span> <span class=\"token string\">'React'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> persona<span class=\"token punctuation\">.</span>name\n<span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> persona<span class=\"token punctuation\">.</span>age\n\n<span class=\"token comment\">// ahora con objetos</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> persona\n\n<span class=\"token comment\">// también podemos añadir valores por defecto</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>books <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> persona\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>persona<span class=\"token punctuation\">.</span>books<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> 2</span>\n\n<span class=\"token comment\">// también funciona en funciones</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">El nombre es </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token function\">getName</span><span class=\"token punctuation\">(</span>persona<span class=\"token punctuation\">)</span></code></pre>\n\n<p><strong>¿Por qué es importante?</strong></p>\n<p>En React hay mucho código básico que da por sentado que conoces y dominas esta sintaxis. Piensa que los objetos y los arreglos son tipos de datos que son perfectos para guardar datos a representar en una interfaz. Así que poder tratarlos fácilmente te va a hacer la vida mucho más fácil.</p>\n<h5 id=\"métodos-de-array\">Métodos de Array</h5>\n<p>Saber manipular arreglos en JavaScript es básico para considerar que se domina. Cada método realiza una operación en concreto y devuelve diferentes tipos de datos. Todos los métodos que veremos reciben un callback (función) que se ejecutará para cada uno de los elementos del array.</p>\n<p>Vamos a revisar algunos de los métodos más usados:</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// tenemos este array con diferentes elementos</span>\n<span class=\"token keyword\">const</span> networks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'youtube'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://midu.tube'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">needsUpdate</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'twitter'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://twitter.com/midudev'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">needsUpdate</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'instagram'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://instagram.com/midu.dev'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">needsUpdate</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// con .map podemos transformar cada elemento</span>\n<span class=\"token comment\">// y devolver un nuevo array</span>\nnetworks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">singleNetwork</span> <span class=\"token operator\">=></span> singleNetwork<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Resultado:</span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'https://midu.tube'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'https://twitter.com/midudev'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'https://instagram.com/midu.dev'</span>\n  <span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// con .filter podemos filtrar elementos de un array que no</span>\n<span class=\"token comment\">// pasen una condición determinada por la función que se le pasa.</span>\n<span class=\"token comment\">// Devuelve un nuevo array.</span>\nnetworks<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">singleNetwork</span> <span class=\"token operator\">=></span> singleNetwork<span class=\"token punctuation\">.</span>needsUpdate <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Resultado:</span>\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'youtube'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://midu.tube'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">needsUpdate</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'twitter'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://twitter.com/midudev'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">needsUpdate</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// con .find podemos buscar un elemento de un array que</span>\n<span class=\"token comment\">// cumpla la condición definida en el callback</span>\nnetworks<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">singleNetwork</span> <span class=\"token operator\">=></span> singleNetwork<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> <span class=\"token string\">'youtube'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Resultado:</span>\n<span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'youtube'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://midu.tube'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">needsUpdate</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// con .some podemos revisar si algún elemento del array cumple una condición</span>\nnetworks<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">singleNetwork</span> <span class=\"token operator\">=></span> singleNetwork<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> <span class=\"token string\">'tiktok'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nnetworks<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">singleNetwork</span> <span class=\"token operator\">=></span> singleNetwork<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> <span class=\"token string\">'instagram'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre>\n\n<p><strong>¿Por qué es importante?</strong></p>\n<p>En React es muy normal almacenar los datos que tenemos que representar en la UI como array. Esto hace que muchas veces necesitemos tratarlos, filtrarlos o extraer información de ellos. Es primordial entender, conocer y dominar al menos estos métodos, ya que son los más usados.</p>\n<h5 id=\"sintaxis-spread\">Sintaxis Spread</h5>\n<p>La sintaxis de spread nos permite expandir un iterable o un objeto en otro lugar dónde se espere esa información. Para poder utilizarlo, necesitamos utilizar los tres puntos suspensivos <code>...</code> justo antes.</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> networks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Twitter'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Twitch'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Instagram'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> newNetwork <span class=\"token operator\">=</span> <span class=\"token string\">'Tik Tok'</span>\n<span class=\"token comment\">// creamos un nuevo array expandiendo el array networks y</span>\n<span class=\"token comment\">// colocando al final el elemento newNetwork</span>\n<span class=\"token comment\">// utilizando la sintaxis de spread</span>\n<span class=\"token keyword\">const</span> allNetworks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>networks<span class=\"token punctuation\">,</span> newNetwork<span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>allNetworks<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// -> [ 'Twitter', 'Twitch', 'Instagram', 'Tik Tok' ]</span></code></pre>\n\n<p>Esto mismo lo podemos conseguir con un objeto, de forma que podemos expandir todas sus propiedades en otro objeto de forma muy sencilla.</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> midu <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Miguel'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">twitter</span><span class=\"token operator\">:</span> <span class=\"token string\">'@midudev'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> miduWithNewInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>midu<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">youtube</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://youtube.com/midudev'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">books</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Aprende React'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>miduWithNewInfo<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   name: 'Miguel',</span>\n<span class=\"token comment\">//   twitter: '@midudev',</span>\n<span class=\"token comment\">//   youtube: 'https://youtube.com/midudev',</span>\n<span class=\"token comment\">//   books: [ 'Aprende React' ]</span>\n<span class=\"token comment\">// }</span></code></pre>\n\n<p>Es importante notar que esto hace una copia, sí, pero superficial. Si tuviéramos objetos anidados dentro del objeto entonces deberíamos tener en cuenta que podríamos mutar la referencia. Veamos un ejemplo.</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> midu <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Miguel'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">twitter</span><span class=\"token operator\">:</span> <span class=\"token string\">'@midudev'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">experience</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">years</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">focus</span><span class=\"token operator\">:</span> <span class=\"token string\">'javascript'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> miduWithNewInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>midu<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">youtube</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://youtube.com/midudev'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">books</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Aprende React'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// cambiamos un par de propiedades de la \"copia\" del objeto</span>\nmiduWithNewInfo<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Miguel Ángel'</span>\nmiduWithNewInfo<span class=\"token punctuation\">.</span>experience<span class=\"token punctuation\">.</span>years <span class=\"token operator\">=</span> <span class=\"token number\">19</span>\n\n<span class=\"token comment\">// hacemos un console.log del objeto inicial</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>midu<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// en la consola veremos que el nombre no se ha modificado</span>\n<span class=\"token comment\">// en el objeto original pero los años de experiencia sí</span>\n<span class=\"token comment\">// ya que hemos mutado la referencia original</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   name: 'Miguel',</span>\n<span class=\"token comment\">//   twitter: '@midudev',</span>\n<span class=\"token comment\">//   experience: { years: 19, focus: 'javascript' }</span>\n<span class=\"token comment\">// }</span></code></pre>\n\n<p><strong>¿Por qué es importante?</strong></p>\n<p>En React es muy normal tener que añadir nuevos elementos a un array o crear nuevos objetos sin necesidad de mutarlos. El operador Rest nos puede ayudar a conseguir esto. Si no conoces bien el concepto de valor y referencia en JavaScript, sería conveniente que lo repases.</p>\n<h5 id=\"operador-rest\">Operador Rest</h5>\n<p>La sintaxis <code>...</code> hace tiempo que funciona en JavaScript en los parámetros de una función. A esta técnica se le llamaba <em>parámetros rest</em> y nos permitía tener un número indefinido de argumentos en una función y poder acceder a ellos después como un array.</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">suma</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>allArguments</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> allArguments<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previous<span class=\"token punctuation\">,</span> current</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> previous <span class=\"token operator\">+</span> current\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>Ahora el operador rest también se puede utilizar para agrupar el resto de propiedades un objeto o iterable. Esto puede ser útil para extraer un elemento en concreto del objeto o el iterable y crear una copia superficial del resto en una nueva variable.</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> midu <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Miguel'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">twitter</span><span class=\"token operator\">:</span> <span class=\"token string\">'@midudev'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">experience</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">years</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">focus</span><span class=\"token operator\">:</span> <span class=\"token string\">'javascript'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restOfMidu<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> midu\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>restOfMidu<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// -> {</span>\n<span class=\"token comment\">//   twitter: '@midudev',</span>\n<span class=\"token comment\">//   experience: {</span>\n<span class=\"token comment\">//     years: 18,</span>\n<span class=\"token comment\">//     focus: 'javascript'</span>\n<span class=\"token comment\">//   }</span>\n<span class=\"token comment\">// }</span></code></pre>\n\n<p>También podría funcionar con arrays:</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>firstNumber<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restOfNumbers<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>firstNumber<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>restOfNumbers<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> [2, 3]</span></code></pre>\n\n<p><strong>¿Por qué es importante?</strong></p>\n<p>Es una forma interesante de <em>eliminar</em> (de forma figurada) una propiedad de un objeto y creando una copia superficial del resto de propiedades. A veces puede ser interesante para extraer la información que queremos de unos parámetros y dejar el resto en un objeto que pasaremos hacia otro nivel.</p>\n<h5 id=\"encadenamiento-opcional-optional-chaining\">Encadenamiento opcional (Optional Chaining)</h5>\n<p>El operador de encadenamiento opcional <code>?.</code> te permite leer con seguridad el valor de una propiedad que está anidada dentro de diferentes niveles de un objeto.</p>\n<p>De esta forma, en lugar de revisar si las propiedades existen para poder acceder a ellas, lo que hacemos es usar el encadenamiento opcional.</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> author <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Miguel'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">libro</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Aprendiendo React'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">writeBook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Writing!'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// sin optional chaining</span>\n<span class=\"token punctuation\">(</span>author <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> author <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">.</span>libro <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> author<span class=\"token punctuation\">.</span>libro <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token operator\">:</span> author<span class=\"token punctuation\">.</span>libro<span class=\"token punctuation\">.</span>name \n\n<span class=\"token comment\">// con optional chaining</span>\nauthor<span class=\"token operator\">?.</span>libro<span class=\"token operator\">?.</span>name</code></pre>\n\n<p><strong>¿Por qué es importante?</strong></p>\n<p>Un objeto es una estructura de datos que es perfecta a la hora de representar muchos elementos de la UI. ¿Tienes un artículo? Toda la información de un artículo seguramente la tendrás representada en un objeto.</p>\n<p>Conforme tu UI sea más grande y compleja, estos objetos tendrán más información y necesitarás dominar el encadenamiento opcional <code>?.</code> para poder acceder a su información con garantías.</p>\n<hr>\n"}
