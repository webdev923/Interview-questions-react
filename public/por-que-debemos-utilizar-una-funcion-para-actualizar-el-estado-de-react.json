{"id":"por-que-debemos-utilizar-una-funcion-para-actualizar-el-estado-de-react","level":1,"title":"¿Por qué debemos utilizar una función para actualizar el estado de React?","content":"<p>A la hora de actualizar el estado de React, debemos utilizar la función que nos facilita el hook <code>useState</code> para actualizar el estado.</p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>¿Por qué es esto necesario? En primer lugar, el estado en React debe ser inmutable. Es decir, no podemos modificar el estado directamente, sino que debemos siempre crear un nuevo valor para el nuevo estado.</p>\n<p>Esto nos permite que la integridad de la UI respecto a los datos que renderiza siempre es correcta.</p>\n<p>Por otro lado, llamar a una función le permite a React saber que el estado ha cambiado y que debe re-renderizar el componente si es necesario. Además esto lo hace de forma asíncrona, por lo que podemos llamar a <code>setCount</code> tantas veces como queramos y React se encargará de actualizar el estado cuando lo considere oportuno.</p>\n<hr>\n"}
