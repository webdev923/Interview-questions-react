{"id":"que-es-el-renderizado-condicional-en-react","level":0,"title":"¿Qué es el renderizado condicional en React?","content":"<p>El renderizado condicional es la forma de mostrar un componente u otro dependiendo de una condición.</p>\n<p>Para hacer renderizado condicional en React usamos el operador ternario:</p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> text <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> text\n    <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>En este caso, si la prop <code>text</code> existe, se renderiza el botón. Si no existe, no se renderiza nada.</p>\n<p>Es común encontrar implementaciones del renderizado condicional con el operador <code>&amp;&amp;</code>, del tipo:</p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">List</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> listArray <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> listArray<span class=\"token operator\">?.</span>length <span class=\"token operator\">&amp;&amp;</span> listArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token operator\">=></span>item<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>Parece que tiene sentido... si el <code>length</code> es positivo (mayor a cero) pintamos el map. !Pues no! ❌ Cuidado, si tiene <code>length</code> de cero ya que se pintará en el navegador un 0.</p>\n<p>Es preferible utilizar el operador ternario. <em>Kent C. Dodds</em> tiene un artículo interesante hablando del tema. <a href=\"https://kentcdodds.com/blog/use-ternaries-rather-than-and-and-in-jsx\">Use ternaries rather than &amp;&amp; in JSX</a></p>\n<hr>\n"}
