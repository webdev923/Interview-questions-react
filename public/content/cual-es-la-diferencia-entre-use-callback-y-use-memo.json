{"id":"cual-es-la-diferencia-entre-use-callback-y-use-memo","level":1,"title":"¿Cuál es la diferencia entre `useCallback` y `useMemo`?","content":"<p>La diferencia entre <code>useCallback</code> y <code>useMemo</code> es que <code>useCallback</code> memoriza una función y <code>useMemo</code> memoriza el resultado de una función.</p>\n<p>En cualquier caso, en realidad, <code>useCallback</code> es una versión especializada de <code>useMemo</code>. De hecho se puede simular la funcionalidad de <code>useCallback</code> con <code>useMemo</code>:</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n\n\n<hr>\n"}
