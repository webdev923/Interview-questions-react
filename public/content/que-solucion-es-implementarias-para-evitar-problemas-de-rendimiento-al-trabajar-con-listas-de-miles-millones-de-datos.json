{"id":"que-solucion-es-implementarias-para-evitar-problemas-de-rendimiento-al-trabajar-con-listas-de-miles-millones-de-datos","title":"¿Qué solución/es implementarías para evitar problemas de rendimiento al trabajar con listas de miles/millones de datos?","content":"<h5 id=\"pagination\">Pagination</h5>\n<p>En lugar de recibir la lista en una sola llamada a la API (lo cual sería negativo tanto para el rendimiento como para el propio servidor y tiempo de respuesta de la API), podríamos implementar un sistema de paginación en el cual la API recibirá un <em>offset</em> o <em>rango</em> de datos deseados. En el FE nuestra responsabilidad es mostrar unos controles adecuados (interfaz de paginación) y gestionar las llamadas a petición de cambio de página para siempre limitar la cantidad de DOM renderizado evitando así una sobrecarga del <em>DOM</em> y, por lo tanto, problemas de rendimiento.</p>\n<h5 id=\"virtualization\">Virtualization</h5>\n<p>Existe una técnica llamada <em>Virtualización</em> que gestiona cuántos elementos de una lista mantenemos <em><strong>vivos</strong></em> en el <em>DOM</em>. El concepto se basa en solo montar los elementos que estén dentro del <em>viewport</em> más un <em>buffer</em> determinado (para evitar falta de datos al hacer scroll) y, en cambio, desmontar del <em>DOM</em> todos aquellos elementos que estén fuera de la vista del usuario. De este modo podremos obtener lo mejor de los dos mundos, una experiencia integrada y un DOM liviano que evitará posibles errores de rendimiento. Con esta solución también podremos aprovechar que contamos con los datos en memoria para realizar búsquedas/filtrados sin necesidad de más llamadas al servidor.</p>\n<p>Puedes consultar esta librería para aplicar Virtualización con React: <a href=\"https://github.com/bvaughn/react-virtualized\">React Virtualized</a>.</p>\n<p>Hay que tener en cuenta que cada caso de uso puede encontrar beneficios y/o perjuicios en ambos métodos, dependiendo de factores como capacidad de respuesta de la API, cantidad de datos, necesidad de filtros complejos, etc. Por ello es importante analizar cada caso con criterio.</p>\n<hr>\n"}
