{"id":"que-problemas-crees-que-pueden-aparecer-en-una-aplicacion-al-querer-visualizar-listas-de-miles-millones-de-datos","title":"¿Qué problemas crees que pueden aparecer en una aplicación al querer visualizar listas de miles/millones de datos?","content":"<ul>\n<li><strong>Tiempo de respuesta del servidor:</strong> Hacer peticiones de millones de datos no es, en general, una buena estrategia. Incluso en el mejor de los casos, en el que el servidor solo debe devolver los datos sin tratarlos, hay un coste asociado al <em>parseo</em> y <em>envío</em> de los mismos a través de la red. Llamadas con un tamaño desmesurado pueden incurrir en interfaces lentas, e incluso en <em>timeouts</em> en la respuesta.</li>\n<li><strong>Problemas de rendimiento:</strong> Aunque es cierto que <strong>React</strong> se basa en un modelo <em>declarativo</em> en el cual no debemos tener una exhaustivo control o gestión de cómo se <em>renderiza</em>, no hay que olvidar que malas decisiones técnicas pueden conllevar aplicaciones totalmente inestables incluso con las mejores tecnologías. No es viable <em>renderizar</em> un <em>DOM</em> con millones de elementos, el <em>navegador</em> no podrá gestionarlo y, tarde o temprano, la aplicación no será usable.</li>\n</ul>\n<p> Como developers, nuestra misión es encontrar el equilibrio entre rendimiento y experiencia, intentando priorizar siempre cómo el usuario sentirá la aplicación. No hay ningún caso lo suficientemente justificado para <em>renderizar</em> en pantalla miles de datos.</p>\n<p> <strong>El espacio de visualización es limitado (<em>viewport</em>), al igual que deberían serlo los datos que añadimos al DOM.</strong></p>\n<hr>\n"}
