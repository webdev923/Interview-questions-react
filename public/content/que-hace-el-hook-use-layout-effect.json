{"id":"que-hace-el-hook-use-layout-effect","level":1,"title":"¿Qué hace el hook `useLayoutEffect`?","content":"<p><code>useLayoutEffect</code> funciona igual que el hook <code>useEffect</code>, con la excepción de que este se dispara sincrónicamente después de leer todas las mutaciones del DOM.</p>\n<p>Llama <code>useLayoutEffect</code> en el nivel superior del componente.</p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useLayoutEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p><code>useLayoutEffect</code> recibe dos argumentos:</p>\n<ul>\n<li>Una función callback que define el efecto.</li>\n<li>Una lista de dependencias.</li>\n</ul>\n<p>Aunque el <code>useEffect</code> es el hook de renderizado más usado, si se necesita que los efectos del DOM muten cambiando la apariencia entre el efecto y el renderizado, entonces es conveniente que uses el <code>useLayoutEffect</code>.</p>\n<h5 id=\"orden-de-ejecución-del-uselayouteffect\">Orden de ejecución del <code>useLayoutEffect</code></h5>\n<p>El orden de ejecución del <code>useLayoutEffect</code>, ya que se ejecuta de forma síncrona, al momento en que React termina de ejecutar todas las mutaciones, pero antes de renderizarlo en pantalla, es el siguiente:</p>\n<ul>\n<li>El componente se actualiza por algún cambio de estado, props o el padre se re-renderiza</li>\n<li>React renderiza el componente</li>\n<li>Tu efecto es ejecutado</li>\n<li>La pantalla se actualiza “visualmente”</li>\n</ul>\n<hr>\n"}
